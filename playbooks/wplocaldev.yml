---
- name: Provision a Wordpress Local Development using wp-cli and mariadb
  hosts: localhost
  connection: local

  pre_tasks:
    - name: Check if ~/.my.cnf exists on localhost
      ansible.builtin.stat:
        path: ~/.my.cnf
      register: my_cnf_stat

    - name: Fail if ~/.my.cnf does not exist
      fail:
        msg: |
          It appears ~/.my.cnf does not exist on localhost. 
          Configure the file first with the appropriate superuser credentials
          for your database, then rerun the playbook.
      when: not my_cnf_stat.stat.exists

  vars:
    - mysql_host: local
    - mysql_port: 3306
  vars_prompt:
    - name: project_name
      prompt: "Enter the name of your project (use underscore for space, lowercase preferred)"
      private: no
    - name: wp_version
      prompt: "Enter WordPress version (leave blank to use the latest): "
      private: no

  tasks:
    # Common Role
    - name: Pass datetime for use on filename
      shell: "date +%Y%m%d%H%M%S"
      register: datetime
      no_log: true

    - name: Transform project name for templating
      ansible.builtin.set_fact:
        project_name_cleaned: "{{ project_name | trim() | lower() | replace(' ','_') }}"
      no_log: true

    - name: Transform autogenerated values for project
      ansible.builtin.set_fact:
        site_title: "{{ project_name_cleaned | replace('_', '-') | capitalize() }}"
        project_url: "{{ project_name_cleaned | replace('_', '-') }}.test"
        db_name: "{{ project_name_cleaned }}_{{ datetime.stdout }}"
        db_user: "{{ project_name_cleaned }}_dbadmin"
        db_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digit length=30') | lower }}"
        wp_user_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digit length=30') | lower }}"
        current_path: "{{ lookup('env', 'PWD') }}"
      no_log: true

    # DB Role
    - name: Ping MariaDB server
      wait_for:
        port: "{{ mysql_port }}"
        host: "{{ mysql_host }}"
        timeout: 5  # Adjust timeout as needed
      register: mariadb_ping_result

    - name: Fail if MariaDB server is not reachable
      fail:
        msg: "Failed to connect to MariaDB server. Please check your connection settings."
      when: mariadb_ping_result.failed

    - name: Create a new database
      mysql_db:
        name: "{{ db_name }}"
        state: present

    - name: Create a new user
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "{{ db_name }}.*:ALL"
        state: present

    - name: Grant all privileges on the new database to the user
      mysql_user:
        name: "{{ db_user }}"
        priv: "{{ db_name }}.*:ALL"
        state: present

    - name: Flush privileges to apply changes
      shell: "mysql --defaults-file=~/.my.cnf -e 'FLUSH PRIVILEGES;'"

    # WPCLI Role
    - name: Check if WordPress is in PATH
      ansible.builtin.command: "which wp"
      register: wordpress_path
      ignore_errors: true

    - name: Display WordPress path if found
      debug:
        msg: "WordPress is installed at {{ wordpress_path.stdout }}"
      when: wordpress_path.rc == 0

    - name: Display message if WP-CLI is not found
      debug:
        msg: "WP-CLI is not installed or not in PATH"
      when: wordpress_path.rc != 0

    - name: Create a folder in the current working directory
      ansible.builtin.file:
        path: "{{ current_path }}/{{ project_name_cleaned }}"
        state: directory
      register: project_path

    - name: Download WordPress core files
      ansible.builtin.command: >
        wp core download 
        --path="{{ project_path.path }}" 
        {% if wp_version is defined and wp_version != '' %}
        --version="{{ wp_version }}"
        {% endif %}

    - name: Create the wp config file
      ansible.builtin.command: >
        wp config create --dbname={{ db_name }} --dbuser={{ db_user }} --dbpass={{ db_password }}
      args:
        chdir: "{{ project_path.path }}"

    - name: Create the wordpress local development installation
      ansible.builtin.command: >
        wp core install 
        --url="{{ project_url }}"
        --title="{{ site_title }}"
        --admin_user="{{ project_name_cleaned }}_admin"
        --admin_password="{{ wp_user_password }}"
        --admin_email="hello@{{ project_url }}"
        --path="{{ project_path.path }}"

    - name: Pass project variable files to a text file
      ansible.builtin.template:
        src: templates/wpprojectconfig.j2
        dest: "{{ project_path.path }}/projectconfig.txt"

    # LOCALHOST role
    - name: Pass datetime for use on filename
      shell: "date '+%Y-%m-%d %H:%M:%S'"
      register: datetimestamp

    - name: Add entry for project url to hosts file
      become: true
      become_method: sudo
      ansible.builtin.blockinfile:
        path: /etc/hosts
        block: |
          127.0.0.1 {{ project_url }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ project_url }} on {{ datetimestamp.stdout }}"
        create: yes

    # Apache2 role
    - name: Copy Apache configuration template to sites-available
      become: true
      become_method: sudo
      ansible.builtin.template:
        src: templates/wpconfigsitesenabledapache.j2
        dest: "/etc/apache2/sites-available/{{ project_url }}.conf"
      notify: Restart Apache

    - name: Create symlink to sites-enabled
      become: true
      become_method: sudo
      ansible.builtin.file:
        src: /etc/apache2/sites-available/{{ project_url }}.conf
        dest: /etc/apache2/sites-enabled/{{ project_url }}.conf
        state: link

    - name: Display success message
      ansible.builtin.debug:
        msg: "Refer to projectconfig.txt in your project root for config details used in this playbook."
      when: ansible_failed_task is undefined

  handlers:
    - name: Restart Apache
      become: true
      become_method: sudo
      ansible.builtin.service:
        name: apache2
        state: restarted