---
# todo: add support for a composer require chain for installing a variety of require flags for a variety of projects
- name: Set the laravel version if defined
  when: laravel_version is defined
  ansible.builtin.set_fact:
    set lvers: "{{ laravel_version }}"

- name: Create a laravel local development install
  community.general.composer:
    command: create-project
    arguments: "laravel/laravel:{{ lvers }} {{ project_path.path }}"
    working_dir: "{{ project_path.path }}"
    prefer_dist: true

- name: Install packages using composer require
  community.general.composer:
    command: require
    arguments: "{{ item }}"
    working_dir: "{{ project_path.path }}"
  with_items: "{{ composer_packages }}"

- name: Let tasks know that laravel is used in the project
  ansible.builtin.set_fact:
    laravel_in_project: true

- name: Replace DB_CONNECTION in env
  when: not_sqlite
  lineinfile:
    path: "{{ project_path.path }}/.env"
    regexp: '^(#?\s*)DB_CONNECTION='
    line: 'DB_CONNECTION={{ db_connection }}'

- name: Replace DB_HOST
  when: not_sqlite
  lineinfile:
    path: "{{ project_path.path }}/.env"
    regexp: '^(#?\s*)DB_HOST='
    line: 'DB_HOST={{ db_host }}'

- name: Replace DB_PORT
  when: not_sqlite
  lineinfile:
    path: "{{ project_path.path }}/.env"
    regexp: '(#?\s*)DB_PORT='
    line: 'DB_PORT={{ db_port }}'

- name: Replace DB_DATABASE
  when: not_sqlite
  lineinfile:
    path: "{{ project_path.path }}/.env"
    regexp: '(#?\s*)DB_DATABASE='
    line: 'DB_DATABASE={{ db_name }}'

- name: Replace DB_USERNAME
  when: not_sqlite
  lineinfile:
    path: "{{ project_path.path }}/.env"
    regexp: '(#?\s*)DB_USERNAME='
    line: 'DB_USERNAME={{ db_user }}'

- name: Replace DB_PASSWORD
  when: not_sqlite
  lineinfile:
    path: "{{ project_path.path }}/.env"
    regexp: '(#?\s*)DB_PASSWORD='
    line: 'DB_PASSWORD={{ db_password }}'

- name: Replace APP_NAME
  lineinfile:
    path: "{{ project_path.path }}/.env"
    regexp: '^APP_NAME='
    line: 'APP_NAME={{ project_name_cleaned }}'

- name: Replace APP_URL
  lineinfile:
    path: "{{ project_path.path }}/.env"
    regexp: '^APP_URL='
    line: 'APP_URL={{ project_url }}'

- name: Transfer provider config
  ansible.builtin.template:
    src: templates/AppServiceProvider.php.j2
    dest: "{{ project_path.path }}/app/Providers/AppServiceProvider.php"

- name: Transfer app config
  ansible.builtin.template:
    src: templates/app.php.j2
    dest: "{{ project_path.path }}/config/app.php"

- name: Generate your app key
  ansible.builtin.command: php artisan key:generate --show
  args:
    chdir: "{{ project_path.path }}"
  register: app_key_command
  changed_when: app_key_command.rc == 0

- name: store your app_key for use
  ansible.builtin.set_fact:
    app_key: "{{ app_key_command.stdout }}"

- name: Replace APP_KEY
  lineinfile:
    path: "{{ project_path.path }}/.env"
    regexp: '^APP_KEY='
    line: 'APP_KEY={{ app_key }}'

- name: Set directory loaded by the server application
  when: public_project_path is undefined
  ansible.builtin.set_fact:
    public_project_path: "{{ project_path.path }}/public"

- name: Set directory to symlink the project to
  when: symlink_project_path is undefined
  ansible.builtin.set_fact:
    symlink_project_path: "/var/www/html/{{ project_url }}"
