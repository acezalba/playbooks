---
# https://make.wordpress.org/cli/handbook/
# TODO: Incorporate use of the config.yml
# https://make.wordpress.org/cli/handbook/references/config/

- name: Check if wp is in PATH
  ansible.builtin.command: "which wp"
  register: wp_path
  ignore_errors: true

- name: Trigger installation instructions if wp not found
  when: wp_path.rc != 0
  ansible.builtin.set_fact:
    install_wp: true

# Install tasks for wp-cli
# TODO: transform to more idiomatic ansible
- name: Download wp-cli
  when: install_wp
  become: true
  become_method: sudo
  shell: "curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar"

- name: add exec privs to wp-cli.phar
  when: install_wp
  become: true
  become_method: sudo
  shell: "chmod +x wp-cli.phar"

- name: transfer wp-cli.phar to path-accessible directory
  when: install_wp
  become: true
  become_method: sudo
  shell: "mv wp-cli.phar /usr/local/bin/wp"

- name: Download WordPress core files
  ansible.builtin.command: >
    wp core download 
    --path="{{ project_path.path }}" 
    {% if wp_version is defined and wp_version != '' %}
    --version="{{ wp_version }}"
    {% endif %}

- name: Create the wp config file
  ansible.builtin.command: >
    wp config create --dbname={{ db_name }} --dbuser={{ db_user }} --dbpass={{ db_password }}
  args:
    chdir: "{{ project_path.path }}"
  no_log: true

- name: Generate the wp user password
  ansible.builtin.set_fact:
    wp_user_password: "{{ lookup('password', '/dev/null chars=ascii_letters,digit length=30') | lower }}"

- name: Create the wordpress local development installation
  ansible.builtin.command: >
    wp core install 
    --url="{{ project_url }}"
    --title="{{ site_title }}"
    --admin_user="{{ project_name_cleaned }}_admin"
    --admin_password="{{ wp_user_password }}"
    --admin_email="hello@{{ project_url }}"
    --path="{{ project_path.path }}"
  no_log: true

- name: Pass project variable files to a text file
  when: ansible_connection == 'local'
  ansible.builtin.template:
    src: templates/wpprojectconfig.j2
    dest: "{{ project_path.path }}/projectconfig.txt"

- name: Set directory loaded by the server application
  when: public_project_path is undefined
  ansible.builtin.set_fact:
    public_project_path: "{{ project_path.path }}"

- name: Set directory to symlink the project to
  when: symlink_project_path is undefined
  ansible.builtin.set_fact:
    symlink_project_path: "/var/www/html/{{ project_url }}"